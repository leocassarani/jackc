use jackc::jack::{Keyword, Token, Tokenizer};
use std::path::PathBuf;
use std::{env, fs};

fn read_test_file(filename: &str) -> String {
    let dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());
    let path = dir.join("tests").join("testdata").join(filename);
    fs::read_to_string(path).expect("couldn't load test file")
}

#[test]
fn array_test_jack_test() {
    let source = read_test_file("ArrayTest.jack");
    let tokenizer = Tokenizer::new(&source);
    let tokens: Vec<Token> = tokenizer.collect();

    assert_eq!(
        tokens,
        vec![
            Token::Keyword(Keyword::Class),
            Token::Identifier("Main".to_string()),
            Token::Symbol('{'),
            Token::Keyword(Keyword::Function),
            Token::Keyword(Keyword::Void),
            Token::Identifier("main".to_string()),
            Token::Symbol('('),
            Token::Symbol(')'),
            Token::Symbol('{'),
            Token::Keyword(Keyword::Var),
            Token::Identifier("Array".to_string()),
            Token::Identifier("a".to_string()),
            Token::Symbol(';'),
            Token::Keyword(Keyword::Var),
            Token::Keyword(Keyword::Int),
            Token::Identifier("length".to_string()),
            Token::Symbol(';'),
            Token::Keyword(Keyword::Var),
            Token::Keyword(Keyword::Int),
            Token::Identifier("i".to_string()),
            Token::Symbol(','),
            Token::Identifier("sum".to_string()),
            Token::Symbol(';'),
            Token::Keyword(Keyword::Let),
            Token::Identifier("length".to_string()),
            Token::Symbol('='),
            Token::Identifier("Keyboard".to_string()),
            Token::Symbol('.'),
            Token::Identifier("readInt".to_string()),
            Token::Symbol('('),
            Token::StrConst("HOW MANY NUMBERS? ".to_string()),
            Token::Symbol(')'),
            Token::Symbol(';'),
            Token::Keyword(Keyword::Let),
            Token::Identifier("a".to_string()),
            Token::Symbol('='),
            Token::Identifier("Array".to_string()),
            Token::Symbol('.'),
            Token::Identifier("new".to_string()),
            Token::Symbol('('),
            Token::Identifier("length".to_string()),
            Token::Symbol(')'),
            Token::Symbol(';'),
            Token::Keyword(Keyword::Let),
            Token::Identifier("i".to_string()),
            Token::Symbol('='),
            Token::IntConst(0),
            Token::Symbol(';'),
            Token::Keyword(Keyword::While),
            Token::Symbol('('),
            Token::Identifier("i".to_string()),
            Token::Symbol('<'),
            Token::Identifier("length".to_string()),
            Token::Symbol(')'),
            Token::Symbol('{'),
            Token::Keyword(Keyword::Let),
            Token::Identifier("a".to_string()),
            Token::Symbol('['),
            Token::Identifier("i".to_string()),
            Token::Symbol(']'),
            Token::Symbol('='),
            Token::Identifier("Keyboard".to_string()),
            Token::Symbol('.'),
            Token::Identifier("readInt".to_string()),
            Token::Symbol('('),
            Token::StrConst("ENTER THE NEXT NUMBER: ".to_string()),
            Token::Symbol(')'),
            Token::Symbol(';'),
            Token::Keyword(Keyword::Let),
            Token::Identifier("i".to_string()),
            Token::Symbol('='),
            Token::Identifier("i".to_string()),
            Token::Symbol('+'),
            Token::IntConst(1),
            Token::Symbol(';'),
            Token::Symbol('}'),
            Token::Keyword(Keyword::Let),
            Token::Identifier("i".to_string()),
            Token::Symbol('='),
            Token::IntConst(0),
            Token::Symbol(';'),
            Token::Keyword(Keyword::Let),
            Token::Identifier("sum".to_string()),
            Token::Symbol('='),
            Token::IntConst(0),
            Token::Symbol(';'),
            Token::Keyword(Keyword::While),
            Token::Symbol('('),
            Token::Identifier("i".to_string()),
            Token::Symbol('<'),
            Token::Identifier("length".to_string()),
            Token::Symbol(')'),
            Token::Symbol('{'),
            Token::Keyword(Keyword::Let),
            Token::Identifier("sum".to_string()),
            Token::Symbol('='),
            Token::Identifier("sum".to_string()),
            Token::Symbol('+'),
            Token::Identifier("a".to_string()),
            Token::Symbol('['),
            Token::Identifier("i".to_string()),
            Token::Symbol(']'),
            Token::Symbol(';'),
            Token::Keyword(Keyword::Let),
            Token::Identifier("i".to_string()),
            Token::Symbol('='),
            Token::Identifier("i".to_string()),
            Token::Symbol('+'),
            Token::IntConst(1),
            Token::Symbol(';'),
            Token::Symbol('}'),
            Token::Keyword(Keyword::Do),
            Token::Identifier("Output".to_string()),
            Token::Symbol('.'),
            Token::Identifier("printString".to_string()),
            Token::Symbol('('),
            Token::StrConst("THE AVERAGE IS: ".to_string()),
            Token::Symbol(')'),
            Token::Symbol(';'),
            Token::Keyword(Keyword::Do),
            Token::Identifier("Output".to_string()),
            Token::Symbol('.'),
            Token::Identifier("printInt".to_string()),
            Token::Symbol('('),
            Token::Identifier("sum".to_string()),
            Token::Symbol('/'),
            Token::Identifier("length".to_string()),
            Token::Symbol(')'),
            Token::Symbol(';'),
            Token::Keyword(Keyword::Do),
            Token::Identifier("Output".to_string()),
            Token::Symbol('.'),
            Token::Identifier("println".to_string()),
            Token::Symbol('('),
            Token::Symbol(')'),
            Token::Symbol(';'),
            Token::Keyword(Keyword::Return),
            Token::Symbol(';'),
            Token::Symbol('}'),
            Token::Symbol('}'),
        ]
    );
}

#[test]
fn square_game_jack_test() {
    let source = read_test_file("SquareGame.jack");
    let tokenizer = Tokenizer::new(&source);
    let tokens: Vec<Token> = tokenizer.collect();

    assert_eq!(
        tokens,
        vec![
            Token::Keyword(Keyword::Class),
            Token::Identifier("SquareGame".to_string()),
            Token::Symbol('{'),
            Token::Keyword(Keyword::Field),
            Token::Identifier("Square".to_string()),
            Token::Identifier("square".to_string()),
            Token::Symbol(';',),
            Token::Keyword(Keyword::Field),
            Token::Keyword(Keyword::Int),
            Token::Identifier("direction".to_string()),
            Token::Symbol(';',),
            Token::Keyword(Keyword::Constructor),
            Token::Identifier("SquareGame".to_string()),
            Token::Identifier("new".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Let),
            Token::Identifier("square".to_string()),
            Token::Symbol('=',),
            Token::Identifier("Square".to_string()),
            Token::Symbol('.',),
            Token::Identifier("new".to_string()),
            Token::Symbol('(',),
            Token::IntConst(0),
            Token::Symbol(',',),
            Token::IntConst(0),
            Token::Symbol(',',),
            Token::IntConst(30),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Keyword(Keyword::Let),
            Token::Identifier("direction".to_string()),
            Token::Symbol('=',),
            Token::IntConst(0),
            Token::Symbol(';',),
            Token::Keyword(Keyword::Return),
            Token::Keyword(Keyword::This),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::Method),
            Token::Keyword(Keyword::Void),
            Token::Identifier("dispose".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Do),
            Token::Identifier("square".to_string()),
            Token::Symbol('.',),
            Token::Identifier("dispose".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Keyword(Keyword::Do),
            Token::Identifier("Memory".to_string()),
            Token::Symbol('.',),
            Token::Identifier("deAlloc".to_string()),
            Token::Symbol('(',),
            Token::Keyword(Keyword::This),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Keyword(Keyword::Return),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::Method),
            Token::Keyword(Keyword::Void),
            Token::Identifier("moveSquare".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::If),
            Token::Symbol('(',),
            Token::Identifier("direction".to_string()),
            Token::Symbol('=',),
            Token::IntConst(1),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Do),
            Token::Identifier("square".to_string()),
            Token::Symbol('.',),
            Token::Identifier("moveUp".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::If),
            Token::Symbol('(',),
            Token::Identifier("direction".to_string()),
            Token::Symbol('=',),
            Token::IntConst(2),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Do),
            Token::Identifier("square".to_string()),
            Token::Symbol('.',),
            Token::Identifier("moveDown".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::If),
            Token::Symbol('(',),
            Token::Identifier("direction".to_string()),
            Token::Symbol('=',),
            Token::IntConst(3),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Do),
            Token::Identifier("square".to_string()),
            Token::Symbol('.',),
            Token::Identifier("moveLeft".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::If),
            Token::Symbol('(',),
            Token::Identifier("direction".to_string()),
            Token::Symbol('=',),
            Token::IntConst(4),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Do),
            Token::Identifier("square".to_string()),
            Token::Symbol('.',),
            Token::Identifier("moveRight".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::Do),
            Token::Identifier("Sys".to_string()),
            Token::Symbol('.',),
            Token::Identifier("wait".to_string()),
            Token::Symbol('(',),
            Token::IntConst(5),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Keyword(Keyword::Return),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::Method),
            Token::Keyword(Keyword::Void),
            Token::Identifier("run".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Var),
            Token::Keyword(Keyword::Char),
            Token::Identifier("key".to_string()),
            Token::Symbol(';',),
            Token::Keyword(Keyword::Var),
            Token::Keyword(Keyword::Boolean),
            Token::Identifier("exit".to_string()),
            Token::Symbol(';',),
            Token::Keyword(Keyword::Let),
            Token::Identifier("exit".to_string()),
            Token::Symbol('=',),
            Token::Keyword(Keyword::False),
            Token::Symbol(';',),
            Token::Keyword(Keyword::While),
            Token::Symbol('(',),
            Token::Symbol('~',),
            Token::Identifier("exit".to_string()),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::While),
            Token::Symbol('(',),
            Token::Identifier("key".to_string()),
            Token::Symbol('=',),
            Token::IntConst(0),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Let),
            Token::Identifier("key".to_string()),
            Token::Symbol('=',),
            Token::Identifier("Keyboard".to_string()),
            Token::Symbol('.',),
            Token::Identifier("keyPressed".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Keyword(Keyword::Do),
            Token::Identifier("moveSquare".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::If),
            Token::Symbol('(',),
            Token::Identifier("key".to_string()),
            Token::Symbol('=',),
            Token::IntConst(81),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Let),
            Token::Identifier("exit".to_string()),
            Token::Symbol('=',),
            Token::Keyword(Keyword::True),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::If),
            Token::Symbol('(',),
            Token::Identifier("key".to_string()),
            Token::Symbol('=',),
            Token::IntConst(90),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Do),
            Token::Identifier("square".to_string()),
            Token::Symbol('.',),
            Token::Identifier("decSize".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::If),
            Token::Symbol('(',),
            Token::Identifier("key".to_string()),
            Token::Symbol('=',),
            Token::IntConst(88),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Do),
            Token::Identifier("square".to_string()),
            Token::Symbol('.',),
            Token::Identifier("incSize".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::If),
            Token::Symbol('(',),
            Token::Identifier("key".to_string()),
            Token::Symbol('=',),
            Token::IntConst(131),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Let),
            Token::Identifier("direction".to_string()),
            Token::Symbol('=',),
            Token::IntConst(1),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::If),
            Token::Symbol('(',),
            Token::Identifier("key".to_string()),
            Token::Symbol('=',),
            Token::IntConst(133),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Let),
            Token::Identifier("direction".to_string()),
            Token::Symbol('=',),
            Token::IntConst(2),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::If),
            Token::Symbol('(',),
            Token::Identifier("key".to_string()),
            Token::Symbol('=',),
            Token::IntConst(130),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Let),
            Token::Identifier("direction".to_string()),
            Token::Symbol('=',),
            Token::IntConst(3),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::If),
            Token::Symbol('(',),
            Token::Identifier("key".to_string()),
            Token::Symbol('=',),
            Token::IntConst(132),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Let),
            Token::Identifier("direction".to_string()),
            Token::Symbol('=',),
            Token::IntConst(4),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::While),
            Token::Symbol('(',),
            Token::Symbol('~',),
            Token::Symbol('(',),
            Token::Identifier("key".to_string()),
            Token::Symbol('=',),
            Token::IntConst(0),
            Token::Symbol(')',),
            Token::Symbol(')',),
            Token::Symbol('{',),
            Token::Keyword(Keyword::Let),
            Token::Identifier("key".to_string()),
            Token::Symbol('=',),
            Token::Identifier("Keyboard".to_string()),
            Token::Symbol('.',),
            Token::Identifier("keyPressed".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Keyword(Keyword::Do),
            Token::Identifier("moveSquare".to_string()),
            Token::Symbol('(',),
            Token::Symbol(')',),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Symbol('}',),
            Token::Keyword(Keyword::Return),
            Token::Symbol(';',),
            Token::Symbol('}',),
            Token::Symbol('}'),
        ]
    );
}
