use jackc::jack::{Compiler, Parser, Tokenizer};
use jackc::vm::{Command, Segment};
use std::path::PathBuf;
use std::{env, fs};

fn read_test_file(filename: &str) -> String {
    let dir = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());
    let path = dir.join("tests").join("testdata").join(filename);
    fs::read_to_string(path).expect("couldn't load test file")
}

#[test]
fn seven_jack_test() {
    let source = read_test_file("Seven.jack");
    let tokenizer = Tokenizer::new(&source);
    let class = Parser::new(tokenizer).parse().expect("parsing error");
    let mut compiler = Compiler::new();

    assert_eq!(
        compiler.compile(&class),
        vec![
            Command::Function("Main.main".into(), 0),
            Command::Push(Segment::Constant, 1),
            Command::Push(Segment::Constant, 2),
            Command::Push(Segment::Constant, 3),
            Command::Call("Math.multiply".into(), 2),
            Command::Add,
            Command::Call("Output.printInt".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Constant, 0),
            Command::Return,
        ]
    );
}

#[test]
fn convert_to_bin_jack_test() {
    let source = read_test_file("ConvertToBin.jack");
    let tokenizer = Tokenizer::new(&source);
    let class = Parser::new(tokenizer).parse().expect("parsing error");
    let mut compiler = Compiler::new();

    assert_eq!(
        compiler.compile(&class),
        vec![
            Command::Function("Main.main".into(), 1),
            Command::Push(Segment::Constant, 8001),
            Command::Push(Segment::Constant, 16),
            Command::Push(Segment::Constant, 1),
            Command::Neg,
            Command::Call("Main.fillMemory".into(), 3),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Constant, 8000),
            Command::Call("Memory.peek".into(), 1),
            Command::Pop(Segment::Local, 0),
            Command::Push(Segment::Local, 0),
            Command::Call("Main.convert".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("Main.convert".into(), 3),
            Command::Push(Segment::Constant, 1),
            Command::Neg,
            Command::Pop(Segment::Local, 2),
            Command::Label("WHILE_EXP0".into()),
            Command::Push(Segment::Local, 2),
            Command::Not,
            Command::IfGoto("WHILE_END0".into()),
            Command::Push(Segment::Local, 1),
            Command::Push(Segment::Constant, 1),
            Command::Add,
            Command::Pop(Segment::Local, 1),
            Command::Push(Segment::Local, 0),
            Command::Call("Main.nextMask".into(), 1),
            Command::Pop(Segment::Local, 0),
            Command::Push(Segment::Constant, 9000),
            Command::Push(Segment::Local, 1),
            Command::Add,
            Command::Push(Segment::Local, 0),
            Command::Call("Memory.poke".into(), 2),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Local, 1),
            Command::Push(Segment::Constant, 16),
            Command::Gt,
            Command::Not,
            Command::IfGoto("IF_TRUE0".into()),
            Command::Goto("IF_FALSE0".into()),
            Command::Label("IF_TRUE0".into()),
            Command::Push(Segment::Argument, 0),
            Command::Push(Segment::Local, 0),
            Command::And,
            Command::Push(Segment::Constant, 0),
            Command::Eq,
            Command::Not,
            Command::IfGoto("IF_TRUE1".into()),
            Command::Goto("IF_FALSE1".into()),
            Command::Label("IF_TRUE1".into()),
            Command::Push(Segment::Constant, 8000),
            Command::Push(Segment::Local, 1),
            Command::Add,
            Command::Push(Segment::Constant, 1),
            Command::Call("Memory.poke".into(), 2),
            Command::Pop(Segment::Temp, 0),
            Command::Goto("IF_END1".into()),
            Command::Label("IF_FALSE1".into()),
            Command::Push(Segment::Constant, 8000),
            Command::Push(Segment::Local, 1),
            Command::Add,
            Command::Push(Segment::Constant, 0),
            Command::Call("Memory.poke".into(), 2),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_END1".into()),
            Command::Goto("IF_END0".into()),
            Command::Label("IF_FALSE0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Pop(Segment::Local, 2),
            Command::Label("IF_END0".into()),
            Command::Goto("WHILE_EXP0".into()),
            Command::Label("WHILE_END0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("Main.nextMask".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Push(Segment::Constant, 0),
            Command::Eq,
            Command::IfGoto("IF_TRUE0".into()),
            Command::Goto("IF_FALSE0".into()),
            Command::Label("IF_TRUE0".into()),
            Command::Push(Segment::Constant, 1),
            Command::Return,
            Command::Goto("IF_END0".into()),
            Command::Label("IF_FALSE0".into()),
            Command::Push(Segment::Argument, 0),
            Command::Push(Segment::Constant, 2),
            Command::Call("Math.multiply".into(), 2),
            Command::Return,
            Command::Label("IF_END0".into()),
            Command::Function("Main.fillMemory".into(), 0),
            Command::Label("WHILE_EXP0".into()),
            Command::Push(Segment::Argument, 1),
            Command::Push(Segment::Constant, 0),
            Command::Gt,
            Command::Not,
            Command::IfGoto("WHILE_END0".into()),
            Command::Push(Segment::Argument, 0),
            Command::Push(Segment::Argument, 2),
            Command::Call("Memory.poke".into(), 2),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Argument, 1),
            Command::Push(Segment::Constant, 1),
            Command::Sub,
            Command::Pop(Segment::Argument, 1),
            Command::Push(Segment::Argument, 0),
            Command::Push(Segment::Constant, 1),
            Command::Add,
            Command::Pop(Segment::Argument, 0),
            Command::Goto("WHILE_EXP0".into()),
            Command::Label("WHILE_END0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Return,
        ]
    );
}

#[test]
fn square_jack_test() {
    let source = read_test_file("Square.jack");
    let tokenizer = Tokenizer::new(&source);
    let class = Parser::new(tokenizer).parse().expect("parsing error");
    let mut compiler = Compiler::new();

    assert_eq!(
        compiler.compile(&class),
        vec![
            Command::Function("Square.new".into(), 0),
            Command::Push(Segment::Constant, 3),
            Command::Call("Memory.alloc".into(), 1),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::This, 0),
            Command::Push(Segment::Argument, 1),
            Command::Pop(Segment::This, 1),
            Command::Push(Segment::Argument, 2),
            Command::Pop(Segment::This, 2),
            Command::Push(Segment::Pointer, 0),
            Command::Call("Square.draw".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Pointer, 0),
            Command::Return,
            Command::Function("Square.dispose".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::Pointer, 0),
            Command::Call("Memory.deAlloc".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("Square.draw".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::Constant, 1),
            Command::Neg,
            Command::Call("Screen.setColor".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Call("Screen.drawRectangle".into(), 4),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("Square.erase".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::Constant, 0),
            Command::Call("Screen.setColor".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Call("Screen.drawRectangle".into(), 4),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("Square.incSize".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::Constant, 254),
            Command::Lt,
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::Constant, 510),
            Command::Lt,
            Command::And,
            Command::IfGoto("IF_TRUE0".into()),
            Command::Goto("IF_FALSE0".into()),
            Command::Label("IF_TRUE0".into()),
            Command::Push(Segment::Pointer, 0),
            Command::Call("Square.erase".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 2),
            Command::Push(Segment::Constant, 2),
            Command::Add,
            Command::Pop(Segment::This, 2),
            Command::Push(Segment::Pointer, 0),
            Command::Call("Square.draw".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("Square.decSize".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::This, 2),
            Command::Push(Segment::Constant, 2),
            Command::Gt,
            Command::IfGoto("IF_TRUE0".into()),
            Command::Goto("IF_FALSE0".into()),
            Command::Label("IF_TRUE0".into()),
            Command::Push(Segment::Pointer, 0),
            Command::Call("Square.erase".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 2),
            Command::Push(Segment::Constant, 2),
            Command::Sub,
            Command::Pop(Segment::This, 2),
            Command::Push(Segment::Pointer, 0),
            Command::Call("Square.draw".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("Square.moveUp".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::Constant, 1),
            Command::Gt,
            Command::IfGoto("IF_TRUE0".into()),
            Command::Goto("IF_FALSE0".into()),
            Command::Label("IF_TRUE0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Call("Screen.setColor".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::Constant, 1),
            Command::Sub,
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Call("Screen.drawRectangle".into(), 4),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::Constant, 2),
            Command::Sub,
            Command::Pop(Segment::This, 1),
            Command::Push(Segment::Constant, 1),
            Command::Neg,
            Command::Call("Screen.setColor".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::Constant, 1),
            Command::Add,
            Command::Call("Screen.drawRectangle".into(), 4),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("Square.moveDown".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::Constant, 254),
            Command::Lt,
            Command::IfGoto("IF_TRUE0".into()),
            Command::Goto("IF_FALSE0".into()),
            Command::Label("IF_TRUE0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Call("Screen.setColor".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::Constant, 1),
            Command::Add,
            Command::Call("Screen.drawRectangle".into(), 4),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::Constant, 2),
            Command::Add,
            Command::Pop(Segment::This, 1),
            Command::Push(Segment::Constant, 1),
            Command::Neg,
            Command::Call("Screen.setColor".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::Constant, 1),
            Command::Sub,
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Call("Screen.drawRectangle".into(), 4),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("Square.moveLeft".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::Constant, 1),
            Command::Gt,
            Command::IfGoto("IF_TRUE0".into()),
            Command::Goto("IF_FALSE0".into()),
            Command::Label("IF_TRUE0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Call("Screen.setColor".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::Constant, 1),
            Command::Sub,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Call("Screen.drawRectangle".into(), 4),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::Constant, 2),
            Command::Sub,
            Command::Pop(Segment::This, 0),
            Command::Push(Segment::Constant, 1),
            Command::Neg,
            Command::Call("Screen.setColor".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::Constant, 1),
            Command::Add,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Call("Screen.drawRectangle".into(), 4),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("Square.moveRight".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::Constant, 510),
            Command::Lt,
            Command::IfGoto("IF_TRUE0".into()),
            Command::Goto("IF_FALSE0".into()),
            Command::Label("IF_TRUE0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Call("Screen.setColor".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::Constant, 1),
            Command::Add,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Call("Screen.drawRectangle".into(), 4),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::Constant, 2),
            Command::Add,
            Command::Pop(Segment::This, 0),
            Command::Push(Segment::Constant, 1),
            Command::Neg,
            Command::Call("Screen.setColor".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::Constant, 1),
            Command::Sub,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 0),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Push(Segment::This, 1),
            Command::Push(Segment::This, 2),
            Command::Add,
            Command::Call("Screen.drawRectangle".into(), 4),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Return,
        ]
    );
}

#[test]
fn square_game_jack_test() {
    let source = read_test_file("SquareGame.jack");
    let tokenizer = Tokenizer::new(&source);
    let class = Parser::new(tokenizer).parse().expect("parsing error");
    let mut compiler = Compiler::new();

    assert_eq!(
        compiler.compile(&class),
        vec![
            Command::Function("SquareGame.new".into(), 0),
            Command::Push(Segment::Constant, 2),
            Command::Call("Memory.alloc".into(), 1),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::Constant, 0),
            Command::Push(Segment::Constant, 0),
            Command::Push(Segment::Constant, 30),
            Command::Call("Square.new".into(), 3),
            Command::Pop(Segment::This, 0),
            Command::Push(Segment::Constant, 0),
            Command::Pop(Segment::This, 1),
            Command::Push(Segment::Pointer, 0),
            Command::Return,
            Command::Function("SquareGame.dispose".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::This, 0),
            Command::Call("Square.dispose".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Pointer, 0),
            Command::Call("Memory.deAlloc".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("SquareGame.moveSquare".into(), 0),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::Constant, 1),
            Command::Eq,
            Command::IfGoto("IF_TRUE0".into()),
            Command::Goto("IF_FALSE0".into()),
            Command::Label("IF_TRUE0".into()),
            Command::Push(Segment::This, 0),
            Command::Call("Square.moveUp".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE0".into()),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::Constant, 2),
            Command::Eq,
            Command::IfGoto("IF_TRUE1".into()),
            Command::Goto("IF_FALSE1".into()),
            Command::Label("IF_TRUE1".into()),
            Command::Push(Segment::This, 0),
            Command::Call("Square.moveDown".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE1".into()),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::Constant, 3),
            Command::Eq,
            Command::IfGoto("IF_TRUE2".into()),
            Command::Goto("IF_FALSE2".into()),
            Command::Label("IF_TRUE2".into()),
            Command::Push(Segment::This, 0),
            Command::Call("Square.moveLeft".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE2".into()),
            Command::Push(Segment::This, 1),
            Command::Push(Segment::Constant, 4),
            Command::Eq,
            Command::IfGoto("IF_TRUE3".into()),
            Command::Goto("IF_FALSE3".into()),
            Command::Label("IF_TRUE3".into()),
            Command::Push(Segment::This, 0),
            Command::Call("Square.moveRight".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE3".into()),
            Command::Push(Segment::Constant, 5),
            Command::Call("Sys.wait".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Push(Segment::Constant, 0),
            Command::Return,
            Command::Function("SquareGame.run".into(), 2),
            Command::Push(Segment::Argument, 0),
            Command::Pop(Segment::Pointer, 0),
            Command::Push(Segment::Constant, 0),
            Command::Pop(Segment::Local, 1),
            Command::Label("WHILE_EXP0".into()),
            Command::Push(Segment::Local, 1),
            Command::Not,
            Command::Not,
            Command::IfGoto("WHILE_END0".into()),
            Command::Label("WHILE_EXP1".into()),
            Command::Push(Segment::Local, 0),
            Command::Push(Segment::Constant, 0),
            Command::Eq,
            Command::Not,
            Command::IfGoto("WHILE_END1".into()),
            Command::Call("Keyboard.keyPressed".into(), 0),
            Command::Pop(Segment::Local, 0),
            Command::Push(Segment::Pointer, 0),
            Command::Call("SquareGame.moveSquare".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Goto("WHILE_EXP1".into()),
            Command::Label("WHILE_END1".into()),
            Command::Push(Segment::Local, 0),
            Command::Push(Segment::Constant, 81),
            Command::Eq,
            Command::IfGoto("IF_TRUE0".into()),
            Command::Goto("IF_FALSE0".into()),
            Command::Label("IF_TRUE0".into()),
            Command::Push(Segment::Constant, 1),
            Command::Neg,
            Command::Pop(Segment::Local, 1),
            Command::Label("IF_FALSE0".into()),
            Command::Push(Segment::Local, 0),
            Command::Push(Segment::Constant, 90),
            Command::Eq,
            Command::IfGoto("IF_TRUE1".into()),
            Command::Goto("IF_FALSE1".into()),
            Command::Label("IF_TRUE1".into()),
            Command::Push(Segment::This, 0),
            Command::Call("Square.decSize".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE1".into()),
            Command::Push(Segment::Local, 0),
            Command::Push(Segment::Constant, 88),
            Command::Eq,
            Command::IfGoto("IF_TRUE2".into()),
            Command::Goto("IF_FALSE2".into()),
            Command::Label("IF_TRUE2".into()),
            Command::Push(Segment::This, 0),
            Command::Call("Square.incSize".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Label("IF_FALSE2".into()),
            Command::Push(Segment::Local, 0),
            Command::Push(Segment::Constant, 131),
            Command::Eq,
            Command::IfGoto("IF_TRUE3".into()),
            Command::Goto("IF_FALSE3".into()),
            Command::Label("IF_TRUE3".into()),
            Command::Push(Segment::Constant, 1),
            Command::Pop(Segment::This, 1),
            Command::Label("IF_FALSE3".into()),
            Command::Push(Segment::Local, 0),
            Command::Push(Segment::Constant, 133),
            Command::Eq,
            Command::IfGoto("IF_TRUE4".into()),
            Command::Goto("IF_FALSE4".into()),
            Command::Label("IF_TRUE4".into()),
            Command::Push(Segment::Constant, 2),
            Command::Pop(Segment::This, 1),
            Command::Label("IF_FALSE4".into()),
            Command::Push(Segment::Local, 0),
            Command::Push(Segment::Constant, 130),
            Command::Eq,
            Command::IfGoto("IF_TRUE5".into()),
            Command::Goto("IF_FALSE5".into()),
            Command::Label("IF_TRUE5".into()),
            Command::Push(Segment::Constant, 3),
            Command::Pop(Segment::This, 1),
            Command::Label("IF_FALSE5".into()),
            Command::Push(Segment::Local, 0),
            Command::Push(Segment::Constant, 132),
            Command::Eq,
            Command::IfGoto("IF_TRUE6".into()),
            Command::Goto("IF_FALSE6".into()),
            Command::Label("IF_TRUE6".into()),
            Command::Push(Segment::Constant, 4),
            Command::Pop(Segment::This, 1),
            Command::Label("IF_FALSE6".into()),
            Command::Label("WHILE_EXP2".into()),
            Command::Push(Segment::Local, 0),
            Command::Push(Segment::Constant, 0),
            Command::Eq,
            Command::Not,
            Command::Not,
            Command::IfGoto("WHILE_END2".into()),
            Command::Call("Keyboard.keyPressed".into(), 0),
            Command::Pop(Segment::Local, 0),
            Command::Push(Segment::Pointer, 0),
            Command::Call("SquareGame.moveSquare".into(), 1),
            Command::Pop(Segment::Temp, 0),
            Command::Goto("WHILE_EXP2".into()),
            Command::Label("WHILE_END2".into()),
            Command::Goto("WHILE_EXP0".into()),
            Command::Label("WHILE_END0".into()),
            Command::Push(Segment::Constant, 0),
            Command::Return,
        ]
    );
}
